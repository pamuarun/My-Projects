# -*- coding: utf-8 -*-
"""cat and dog.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kf7BaYlAosuLqVqLDijOFpceP6IBpm3d
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d samuelcortinhas/cats-and-dogs-image-classification

import zipfile
zip_ref = zipfile.ZipFile('/content/cats-and-dogs-image-classification.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,BatchNormalization,Dropout

# generators
train_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/train',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(256,256)
)

validation_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/train',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(256,256)
)

# Normalize
def process(image,label):
    image = tf.cast(image/255. ,tf.float32)
    return image,label

train_ds = train_ds.map(process)
validation_ds = validation_ds.map(process)

# create CNN model

model = Sequential()

model.add(Conv2D(32,kernel_size=(3,3),padding='valid',activation='relu',input_shape=(256,256,3)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(64,kernel_size=(3,3),padding='valid',activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(128,kernel_size=(3,3),padding='valid',activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Flatten())

model.add(Dense(128,activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history = model.fit(train_ds,epochs=10,validation_data=validation_ds)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

import cv2

test_img = cv2.imread('/content/cat.jpg')
plt.imshow(test_img)
test_img = cv2.resize(test_img, (256, 256))
test_input = test_img.reshape((1, 256, 256, 3)) / 255.  # Normalize the test image

prediction = model.predict(test_input)
print("Prediction:", prediction)

test_img = cv2.imread('/content/dog.jpg')
plt.imshow(test_img)
test_img = cv2.resize(test_img, (256, 256))
test_input = test_img.reshape((1, 256, 256, 3)) / 255.  # Normalize the test image

prediction = model.predict(test_input)
print("Prediction:", prediction)

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(train_ds, epochs=20, validation_data=validation_ds)

# Class mapping
class_mapping = {0: 'Cat', 1: 'Dog'}

# Load test images
test_img_cat = cv2.imread('/content/cat.jpg')
test_img_cat = cv2.resize(test_img_cat, (256, 256))
test_input_cat = test_img_cat.reshape((1, 256, 256, 3)) / 255.

test_img_dog = cv2.imread('/content/dog.jpg')
test_img_dog = cv2.resize(test_img_dog, (256, 256))
test_input_dog = test_img_dog.reshape((1, 256, 256, 3)) / 255.

# Model prediction on test images
prediction_cat = model.predict(test_input_cat)
prediction_dog = model.predict(test_input_dog)

# Interpret predictions using class mapping
class_prediction_cat = class_mapping[int(round(prediction_cat[0][0]))]
class_prediction_dog = class_mapping[int(round(prediction_dog[0][0]))]

print("Prediction for cat:", class_prediction_cat)
print("Prediction for dog:", class_prediction_dog)

# Evaluate the model on a test set (assuming you have a separate test directory)
test_ds = keras.utils.image_dataset_from_directory(
    directory='/content/test',
    labels='inferred',
    label_mode='int',
    batch_size=32,
    image_size=(256, 256)
)

test_ds = test_ds.map(process)

test_loss, test_accuracy = model.evaluate(test_ds)
print(f'Test Accuracy: {test_accuracy}')
print(f'Test Loss: {test_loss}')

