# -*- coding: utf-8 -*-
"""CREDIT CARD FRAUD  DETECTION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZSknTZH5Jt3ANEpol-r4wT4MyZ8PR3nr
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

train = pd.read_csv('/content/fraudTrain.csv')
test = pd.read_csv('/content/fraudTest.csv')
# %matplotlib inline

from scipy.stats import skew
from scipy.stats import norm
from scipy.special import boxcox1p, inv_boxcox
from datetime import date, datetime
import time
print(train.isnull().sum().sum())
print(test.isnull().sum().sum())
print(train.isna().sum().sum())
print(test.isna().sum().sum())

test.isnull().values.any()
test.head(10)

sns.countplot(train['cc_num'])

train.groupby('cc_num').size()

plt.subplots(figsize=(12, 9))
sns.heatmap(train.corr(), square=True, annot=True, fmt='.2f')

sns.heatmap(train[['amt', 'cc_num']].corr(), fmt='.4f', annot=True, square=True)

train[train['city_pop'] > 1000]['cc_num'].describe()

train['lat'].describe()

sns.distplot(train['zip'])

sns.distplot(train['lat'])

c = ['unix_time','merch_lat','merch_long']
from sklearn import preprocessing
scaler = preprocessing.RobustScaler()
train_X = scaler.fit_transform(train[c])

train_X = pd.DataFrame(train_X, columns=c)

sns.distplot(train_X['merch_lat'])

train_X.columns

training_features = train_X

training_target = train['cc_num']

sns.countplot(x='is_fraud', data=test)
plt.title('Fraud distribution')
plt.show()

sns.countplot(x='is_fraud', data=train)
plt.title('Fraud distribution')
plt.show()

processed_df = pd.get_dummies(
    data=test,
    columns=['state', 'gender'],
    drop_first=True
)

processed_df.head()

correlation_matrix = test[['is_fraud','amt']].corr()
plt.figure(figsize=(15, 10))
sns.heatmap(data=correlation_matrix, annot=True)

processed_df = pd.get_dummies(
    data=train,
    columns=['state', 'gender'],
    drop_first=True
)

processed_df.head()

correlation_matrix = train[['is_fraud','amt']].corr()
plt.figure(figsize=(15, 10))
sns.heatmap(data=correlation_matrix, annot=True)

