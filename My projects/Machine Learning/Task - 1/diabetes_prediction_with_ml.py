# -*- coding: utf-8 -*-
"""Diabetes Prediction with ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l5r9ifPxTKGP8KD-HCMbY6TEVHUFbU2p

**Importing Required Libraries**
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

data = pd.read_csv('/content/diabetes.csv')

data

data.head(5)

data.shape

#Check if any null value is present
data.isnull().values.any()

# Correlation
import seaborn as sns
import matplotlib.pyplot as plt
# get correlation of each features in dataset
corrmat = data.corr()
top_corr_features = corrmat.index
plt.figure(figsize=(20,20))
# Plot Heat Map
g = sns.heatmap(data[top_corr_features].corr(),annot=True,cmap="RdYlGn")

data.corr()

data['Outcome'].value_counts()

data.groupby('Outcome').mean()

# separating the data and labels
X = data.drop(columns = 'Outcome', axis=1)
Y = data['Outcome']

X

Y

"""**Data Standardization**"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = data['Outcome']

print(X)
print(Y)

"""**Check how many other missing(zero) values**"""

print("Total no of rows : {0}".format(len(data)))
print("Number of rows missing Pregnancies: {0}".format(len(data.loc[data['Pregnancies']== 0])))
print("Number of rows missing Glucose: {0}".format(len(data.loc[data['Glucose']== 0])))
print("Number of rows missing BloodPressure: {0}".format(len(data.loc[data['BloodPressure']== 0])))
print("Number of rows missing SkinThickness: {0}".format(len(data.loc[data['SkinThickness']== 0])))
print("Number of rows missing Insulin: {0}".format(len(data.loc[data['Insulin']== 0])))
print("Number of rows missing BMI: {0}".format(len(data.loc[data['BMI']== 0])))
print("Number of rows missing DiabetesPedigreeFunction: {0}".format(len(data.loc[data['DiabetesPedigreeFunction']== 0])))
print("Number of rows missing Age: {0}".format(len(data.loc[data['Age']== 0])))

"""**Train Test Split**"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""**Training the model**"""

classifier = svm.SVC(kernel='linear')

#training the support vector Machine Classifier
classifier.fit(X_train, Y_train)

"""**Accuracy Score**"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

input_data = (5,166,72,19,175,25.8,0.587,51)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

